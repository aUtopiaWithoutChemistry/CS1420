package assign04;

import java.util.Arrays;
import java.util.Scanner;

/**
 * CS1420 assignment 04
 * @auther Zifan Zuo
 * @version Sep 12, 2024
 */
public class MethodPractice {
    public static void main(String args[]) {
        System.out.println("Checking litersToGallons(20). Expecting a result of 5. The actual result is " + litersToGallons(20) + ".");
        System.out.println("Checking sumInRange(-4, 10). Expecting a result of 45. The actual result is " + sumInRange(-4, 10) + ".");
        System.out.println("Checking shiftCipher(\"hello\", 3). Expecting a result of khoor. The actual result is " + shiftCipher("hello", 3) + ".");
        System.out.println("Checking countIntegerZeros(new Scanner(\"hello 0 10 0.0 string0 0\"). Expecting a result of 2. The actual result is " + countIntegerZeros(new Scanner("hello 0 10 0.0 string0 0")) + ".");
        System.out.println("Checking subsequenceString(new char[]{'t', 'o', 'd', 'o', 'g', 'o'}, 2, 4). Expecting a result of dog. The actual result is " + subsequenceString(new char[]{'t', 'o', 'd', 'o', 'g', 'o'}, 2, 4) + ".");
        System.out.println("Checking generateCharArray(5). Expecting a result of [A, B, C, D, E]. The actual result is " + Arrays.toString(generateCharArray(5)) + ".");
        System.out.println("Checking mysteryMessage(8, 2, 4). Expecting a resule of GHIJKLMN. The actual result is " + mysteryMessage(8, 2, 4) + ".");
    }

    /**
     * convert from liter to gallon, return the value of gallon
     *
     * @param liters the number of liters for some liquid
     * @return how many gallons for these amount of liters of liquid
     */
    public static int litersToGallons(double liters) {
        return (int)Math.floor(liters * 0.264172);
    }

    /**
     * to sum up all the integer between the beginning and ending number, return the sum value
     *
     * @param beginning the beginning number of this number sequence
     * @param ending the ending number of this number sequence
     * @return the sum of this number sequence
     */
    public static int sumInRange(int beginning, int ending) {
        int sum = 0;
        for(int i = beginning; i < ending + 1; i++) {
            sum += i;
        }
        return sum;
    }

    /**
     * convert a message based on the a given number to an encrypted
     * message, and return the encrypted message.
     *
     * @param message the original String
     * @param enigma the number for encryption
     * @return encrypted message
     */
    public static String shiftCipher(String message, int enigma) {
        String code = "";
        for(int i = 0; i < message.length(); i++) {
            char nextChar;
            if (message.charAt(i) + enigma > 126)
                nextChar = (char)(message.charAt(i) + enigma - 126 + 31);
            else
                nextChar = (char)(message.charAt(i) + enigma);
            code += nextChar;
        }
        return code;
    }

    /**
     * take user input and count how many integer "0" in there,
     * and return the number.
     *
     * @param userInput a Scanner object to get user's input
     * @return the count of how many 0 in user input.
     */
    public static int countIntegerZeros(Scanner userInput) {
        int count = 0;
        String allUserInput = "";
        while (userInput.hasNext()) {
            allUserInput += userInput.next() + " ";
        }
        String[] separtedElements = allUserInput.split(" ");
        for (int i = 0; i < separtedElements.length; i++) {
            if (separtedElements[i].equals("0")) {
                count++;
            }
        }
        return count;
    }

    /**
     * to create a String based on user provided array of char, the starting and
     * the ending index of this array, and return this String.
     *
     * @param charArray an array of single char
     * @param beginning the beginning index
     * @param ending the ending index
     * @return a String which is made of from the element in input array at beginning
     *         index to the ending index of that array.
     */
    public static String subsequenceString(char[] charArray, int beginning, int ending) {
        String returnString = "";
        if (beginning >= charArray.length || ending >= charArray.length || beginning > ending)
            return returnString;
        for (int i = beginning; i <= ending; i++) {
            returnString += charArray[i];
        }
        return returnString;
    }

    /**
     * generate an array of chars based on giving length of this array and
     * a specific rule of elements for different indexs.
     *
     * @param length the length of the new array
     * @return a char array which contains elemtns generated by a rule
     */
    public static char[] generateCharArray(int length) {
        char[] returnCharArray = new char[length];
        for (int i = 0; i < length; i++) {
            returnCharArray[i] = (char)(i % 26 + 65);
        }
        return returnCharArray;
    }

    /**
     * using generateCharArray() to create an array of chars,
     * and based on that array, using subsequenceString() to generate the original message,
     * and using shiftCipher() to encrypt the original generated message.
     * return that encrypted message.
     *
     * @param length the length of the generated String
     * @param offset the starting index of the element which will be used from the generated char array
     * @param shift the shift number of encryption process
     * @return a encrypted String
     */
    public static String mysteryMessage(int length, int offset, int shift) {
        char[] myChars = generateCharArray(length + offset);
        String originalMessage = subsequenceString(myChars, offset, length + offset - 1);
        String encryptedMessage = shiftCipher(originalMessage, shift);
        return encryptedMessage;
    }
}
